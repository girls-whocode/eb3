#!/usr/bin/env bash
# title					:Enhanced BASH v3
# description		:Give the ability to select from a list of choices
# author				:Unknown (Heavily modified by Jessica Brown)
# date					:2022-Dec-10
# version				:1.0.0
# usage					:
# notes					:
#               :
# bash_version  :5.1.16(1)-release
# ==============================================================================

menuStr=""
returnOrExit=""

function hideCursor {
  printf "\033[?25l"
  
  # capture CTRL+C so cursor can be reset
  trap "showCursor && echo '' && ${returnOrExit} 0" SIGINT
}

function showCursor {
  printf "\033[?25h"
  trap - SIGINT
}

function clearLastMenu {
  local msgLineCount
  msgLineCount=$(printf "$menuStr" | wc -l)

  # moves the cursor up N lines so the output overwrites it
  echo -en "\033[${msgLineCount}A"

  # clear to end of screen to ensure there's no text left behind from previous input
  [ $1 ] && tput ed
}

function renderMenu {
  local start
  local selector
  local instruction
  local selectedIndex
  local listLength
  local longest
  local spaces

  start=0
  selector=""
  instruction="$1"
  selectedIndex=$2
  listLength=$itemsLength
  longest=0
  spaces=""
  menuStr="\n $instruction\n"

  # Get the longest item from the list so that we know how many spaces to add
  # to ensure there's no overlap from longer items when a list is scrolling up or down.
  for (( i=0; i<$itemsLength; i++ )); do
    if (( ${#menuItems[i]} > longest )); then
      longest=${#menuItems[i]}
    fi
  done
  spaces=$(printf ' %.0s' $(eval "echo {1.."$(($longest))"}"))

  if [ $3 -ne 0 ]; then
    listLength=$3

    if [ $selectedIndex -ge $listLength ]; then
      start=$(($selectedIndex+1-$listLength))
      listLength=$(($selectedIndex+1))
    fi
  fi

  for (( i=$start; i<$listLength; i++ )); do
    local currItem="${menuItems[i]}"
    currItemLength=${#currItem}

    if [[ $i = $selectedIndex ]]; then
      currentSelection="${currItem}"
      selector="${Green}ᐅ${txtReset}"
      currItem="${Green}${currItem}${txtReset}"
    else
      selector=" "
    fi

    currItem="${spaces:0:0}${currItem}${spaces:currItemLength}"
    menuStr="${menuStr}\n ${selector} ${currItem}"
  done

  menuStr="${menuStr}\n"

  # whether or not to overwrite the previous menu output
  [ ${4} ] && clearLastMenu

  printf "%s" "${menuStr}"
}

function getChoice {
  local KEY__ARROW_UP
  local KEY__ARROW_DOWN
  local KEY__ENTER
  local captureInput
  local displayHelp
  local maxViewable
  local instruction
  local selectedIndex

  KEY__ARROW_UP=$(echo -e "\033[A")
  KEY__ARROW_DOWN=$(echo -e "\033[B")
  KEY__ENTER=$(echo -e "\n")
  captureInput=true
  displayHelp=false
  maxViewable=0
  instruction="Select an item from the list:"
  selectedIndex=0

  unset selectedChoice
  unset selectionVariable
  
  if [[ "${PS1}" == "" ]]; then
    # running via script
    returnOrExit="exit"
  else
    # running via CLI
    returnOrExit="return"
  fi
  
  if [[ "${BASH}" == "" ]]; then
    printf "\n ${Red}[ERROR] This function utilizes Bash expansion, but your current shell is \"${SHELL}\"${txtReset}\n"
    $returnOrExit 1
  elif [[ $# == 0 ]]; then
    printf "\n ${Red}[ERROR] No arguments provided${txtReset}\n"
    renderHelp
    $returnOrExit 1
  fi
  
  local remainingArgs=()
  while [[ $# -gt 0 ]]; do
    local key="$1"

    case $key in
      -h|--help)
        displayHelp=true
        shift
        ;;
      -i|--index)
        selectedIndex=$2
        shift 2
        ;;
      -m|--max)
        maxViewable=$2
        shift 2
        ;;
      -o|--options)
        menuItems=$2[@]
        menuItems=("${!menuItems}")
        shift 2
        ;;
      -q|--query)
        instruction="$2"
        shift 2
        ;;
      -v|--selectionVariable)
        selectionVariable="$2"
        shift 2
        ;;
      *)
        remainingArgs+=("$1")
        shift
        ;;
    esac
  done

  # just display help
  if $displayHelp; then
    renderHelp
    $returnOrExit 0
  fi

  set -- "${remainingArgs[@]}"
  local itemsLength=${#menuItems[@]}
  
  # no menu items, at least 1 required
  if [[ $itemsLength -lt 1 ]]; then
    printf "\n ${Red}[ERROR] No menu items provided${txtReset}\n"
    renderHelp
    $returnOrExit 1
  fi

  renderMenu "$instruction" $selectedIndex $maxViewable
  hideCursor

  while $captureInput; do
    read -rsn3 key # `3` captures the escape (\033'), bracket ([), & type (A) characters.

    case "$key" in
      "$KEY__ARROW_UP")
        selectedIndex=$((selectedIndex-1))
        (( $selectedIndex < 0 )) && selectedIndex=$((itemsLength-1))

        renderMenu "$instruction" $selectedIndex $maxViewable true
        ;;

      "$KEY__ARROW_DOWN")
        selectedIndex=$((selectedIndex+1))
        (( $selectedIndex == $itemsLength )) && selectedIndex=0

        renderMenu "$instruction" $selectedIndex $maxViewable true
        ;;

      "$KEY__ENTER")
        clearLastMenu true
        showCursor
        captureInput=false
        
        if [[ "${selectionVariable}" != "" ]]; then
          printf -v "${selectionVariable}" "${currentSelection}"
        else
          selectedChoice="${currentSelection}"
        fi
        ;;
    esac
  done
}