#!/usr/bin/env bash
# title					:Enhanced BASH v3
# description			:
# author				:Jessica Brown
# date					:2022-04-21
# version				:3.0.0
# usage					:
# notes					:
# bash_version	:5.1.16(1)-release
# ==============================================================================

dirjumpfolder=${eb3_DirJumpPath}
directory_list="${dirjumpfolder}$(config_get dirListFile)"
last_dir_remove="${dirjumpfolder}$(config_get dirLastRemoveFile)"
dirjump_command="$(config_get dirjumpCommand)"
dir_hist_size=$(config_get dirHistSize)

# Check to see if the directories and files exist, if they don't create them
[ ! -d "${dirjumpfolder}" ] && mkdir -p "${dirjumpfolder}"
[ ! -f "${directory_list}" ] && touch "${directory_list}"

# Source: https://unix.stackexchange.com/a/203160/307359
i=0

alias "$(config_get dirjumpCommand)"="eb3_dirjump"

# Create aliases for the last 15 directories and 0 for home
alias 0="cd ~"
while [ $i -le "${dir_hist_size}" ]; do
	alias $i="$(config_get dirjumpCommand) ${i}"
	i=$((1 + i))
done

function last_del() {
	time_del=$(cat "${last_dir_remove}")
	curr_time=$(date +%s)
	delta_hour=$(echo "(${curr_time}-${time_del})/3600" | bc)

	if [ "${delta_hour}" -ge 1 ]; then
		if [ "${delta_hour}" -eq 1 ]
		then
			echo "A path was last removed an hour ago."
		else
			echo "A path was last removed ${delta_hour} hours ago."
		fi
	else
		delta_minute=$(echo "(${curr_time}-${time_del})/60" | bc)
		if [ "${delta_minute}" -eq 0 ]
		then
			echo "A path was last removed just now."
		elif [ "${delta_minute}" -eq 1 ]
		then
			echo "A path was last removed a minute ago."
		else
			echo "A path was last removed ${delta_minute} minutes ago."
		fi
	fi
}

function get_nth_path() {
	# Get dir path of nth line of directory_list
	# Source: https://stackoverflow.com/a/27056916/9157799
	echo "$(awk -v line=${1} 'NR==line' "${directory_list}")"
}

function apply_max_limit_to_history() {
	# delete all directories whose numbers exceed the specified limit
	# Source: https://stackoverflow.com/q/45125826/9157799

	head -"${dir_hist_size}" "${directory_list}" > "${dirjumpfolder}"${dirSeparator}temp;
	mv -f "${dirjumpfolder}"${dirSeparator}temp "${directory_list}"
}

function insert_dir_path_to_top() {
	# Source: https://superuser.com/a/246841/943615
	echo "${1}" | cat - "${directory_list}" > "${dirjumpfolder}/temp" && mv -f "${dirjumpfolder}/temp" "${directory_list}"
}

function number_of_dir_paths() {
	# Source: https://stackoverflow.com/a/12022403/9157799
	wc -l < "${directory_list}"
}

function print_directory_history() {
	echo -e "${Aqua}Use the number to jump to that directory${txtReset}\n"
	echo -e "${Aqua} 0 ${Yellow} ${HOME} ${txtReset}"
	while read items; do
		local count
		((count++))
		echo -e "${Aqua} ${count} ${Yellow} ${items} ${txtReset}"
	done < "${directory_list}"
}

function path_already_listed() {
	# Check if the given path already listed
	# Source: https://stackoverflow.com/a/4749368/9157799

	if grep -Fxq "$1" "${directory_list}"; then
		echo "exist"
	else
		echo "notexist"
	fi
}

function eb3_dirjump() {
	# if the number of argument is greater than 1
	if [ $# -gt 1 ]; then
		echo "usage: ${dirjump_command} [dir path number]"
		return
	fi

	# if no argument is given
	if [ $# -eq 0 ]; then
		delete_paths_that_no_longer_exist
		print_directory_history

		if [ -f "${last_dir_remove}" ]; then
			last_del
		fi

		return
	fi

	# if the requested path number is not out of range
	if [[ $1 -le $(number_of_dir_paths) ]] && [[ $1 -ge 1 ]]; then
		cd "$(get_nth_path $1)"
	else
		echo "dirjump: the requested dir path number is out of range"
	fi
}

function delete_a_dir_path() {
	# Source: https://stackoverflow.com/a/5413132/9157799
	grep -Fxv "$1" "$directory_list" > "$dirjumpfolder"/temp; mv -f "$dirjumpfolder"/temp "$directory_list"
}

function delete_paths_that_no_longer_exist() {
	# iterate $directory_list
	while IFS="" read -r p || [ -n "$p" ]
	do
		if [[ ! -d $p ]]; then
			# if the dir doesn't exists, it's deleted from $directory_list
			printf '%s\n' "Deleting \"$p\" from directory_list"
			sed -i "\?^$p\$?d" $directory_list
		fi
	done < $directory_list
}

function propose_dir_path() {
	# if it is home directory, reject the proposal
	if [[ "$PWD" == "$HOME" ]]; then
		return
	fi

	if [[ "$(path_already_listed "$PWD")" == "exist" ]]; then
		delete_a_dir_path "$PWD"
	fi

	insert_dir_path_to_top "$PWD"
	if [[ $(number_of_dir_paths) -gt "${dir_hist_size}" ]]; then
		apply_max_limit_to_history
		date +%s > "$last_dir_remove"
	fi
}

function up() {
    local d=""
    limit=$1

	for ((i=1 ; i <= limit ; i++)); do
		d=$d/..
	done

	d=$(echo $d | sed 's/^\///')

	if [ -z "$d" ]; then
		d=..
	fi

	cd $d
}

# If using Zsh
if [ -n "$ZSH_VERSION" ]; then
	# Source: https://stackoverflow.com/a/3964198/9157799
	chpwd_functions=(${chpwd_functions[@]} propose_dir_path)
else
	cd() {
		builtin cd "$@" || exit # https://unix.stackexchange.com/a/366974/307359
		propose_dir_path
	}
fi