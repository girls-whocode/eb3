#!/usr/bin/env bash
# title			:Directory Jump
# description	:Creates a list of 30 last directories visited
# author		:imambungo (https://github.com/imambungo/dirjump/blob/master/dirjump)
#				:Jessica Kennedy (Rework for enhanced bash)
# date			:2019-10-15
# version		:1
# usage			:d will list recient directories, just enter number to jump to them
# notes			:This module is a builtin for enhanced bash
# bash_version	:4.1.5(1)-release
# ==============================================================================
# updated       :2020-12-21

dirjumpfolder=${binLocation}${dirSeparator}${dirJumpPath}${dirSeparator}
directory_list=${binLocation}${dirSeparator}${dirJumpPath}${dirSeparator}${dirListFile}
last_dir_remove=${binLocation}${dirSeparator}${dirJumpPath}${dirSeparator}${dirLastRemoveFile}
dirjump_command=${dirjumpCommand}
history_size=${directoryHistorySize}

# Check to see if the directories and files exist, if they don't create them
[ ! -d ${dirjumpfolder} ] && mkdir -p ${dirjumpfolder}
[ ! -f ${directory_list} ] && touch ${directory_list}

# If you already use the number 0-9 as aliases,
# feel free to comment out or delete these.
# You can still use <dirjump_command> <dir path number>
# to jump through the dir history
# Source: https://unix.stackexchange.com/a/203160/307359
i=0

alias "${dirjump_command}"="dirjump"

while [ ${i} -le ${history_size} ]; do
	alias $i="${dirjump_command} ${i}"
	i=`expr ${i} + 1`
done

function last_del() {
	time_del=`cat ${last_dir_remove}`
	curr_time=`date +%s`
	delta_hour=`echo "(${curr_time}-${time_del})/3600" | bc`

	if [ "${delta_hour}" -ge 1 ]; then
		if [ "${delta_hour}" -eq 1 ]
		then
			echo "A path was last removed an hour ago."
		else
			echo "A path was last removed ${delta_hour} hours ago."
		fi
	else
		delta_minute=`echo "(${curr_time}-${time_del})/60" | bc`
		if [ "${delta_minute}" -eq 0 ]
		then
			echo "A path was last removed just now."
		elif [ "${delta_minute}" -eq 1 ]
		then
			echo "A path was last removed a minute ago."
		else
			echo "A path was last removed ${delta_minute} minutes ago."
		fi
	fi
}

function get_nth_path() {
	# Get dir path of nth line of directory_list
	# Source: https://stackoverflow.com/a/27056916/9157799
	echo $(awk -v line=${1} 'NR==line' "${directory_list}")
}

function apply_max_limit_to_history() {
	# delete all directories whose numbers exceed the specified limit
	# Source: https://stackoverflow.com/q/45125826/9157799

	head -"${history_size}" "${directory_list}" > "${dirjumpfolder}"${dirSeparator}temp;
	mv -f "${dirjumpfolder}"${dirSeparator}temp "${directory_list}"
}

function insert_dir_path_to_top() {
	# Source: https://superuser.com/a/246841/943615

	echo ${1} | cat - "${directory_list}" > "${dirjumpfolder}"/temp && mv -f "${dirjumpfolder}"/temp "${directory_list}"
}

function number_of_dir_paths() {
	# Source: https://stackoverflow.com/a/12022403/9157799

	wc -l < "${directory_list}"
}

function print_directory_history() {
	echo ""
	echo -e "${Aqua} type any listed number to jump to that directory${txtReset}"
	while read items; do
		local count
		((count++))
		echo -e "${Aqua} ${count} ${Yellow} ${items} ${txtReset}"
	done < ${directory_list}
}

function path_already_listed() {
	# Check if the given path already listed
	# Source: https://stackoverflow.com/a/4749368/9157799

	if grep -Fxq "$1" "$directory_list"
	then
		echo "exist"
	else
		echo "notexist"
	fi
}

function dirjump() {
	# make sure $directory_list exist
	if [ ! -f "${directory_list}" ]
	then
		touch "${directory_list}"
	fi

	# if the number of argument is greater than 1
	if [ $# -gt 1 ]
	then
		echo "usage: ${dirjump_command} [dir path number]"
		return
	fi

	# if no argument is given
	if [ $# -eq 0 ]
	then
		delete_paths_that_no_longer_exist
		print_directory_history

		if [ -f "${last_dir_remove}" ]
		then
			last_del
		fi

		return
	fi

	# if the requested path number is not out of range
	if [[ $1 -le $(number_of_dir_paths) ]] && [[ $1 -ge 1 ]]
	then
		cd "$(get_nth_path $1)"

		# PERSONAL PREFERENCE, if you don't want it, just comment it out.
		# automatically list directory content
		# if there are 30 or less item in it
		# Source: https://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x700.html
		# if [ $(ls -A1 | wc -l) -le 30 ]
		# then
		#	ls -A
		# fi
	else
		echo "dirjump: the requested dir path number is out of range"
	fi
}

function delete_a_dir_path() {
	# Source: https://stackoverflow.com/a/5413132/9157799

	grep -Fxv "$1" "$directory_list" > "$dirjumpfolder"/temp; mv -f "$dirjumpfolder"/temp "$directory_list"
}

function delete_paths_that_no_longer_exist() {
	# iterate $directory_list
	while IFS="" read -r p || [ -n "$p" ]
	do
		if [[ ! -d $p ]]; then
			# if the dir doesn't exists, it's deleted from $directory_list
			printf '%s\n' "Deleting \"$p\" from directory_list"
			sed -i "\?^$p\$?d" $directory_list
		fi
	done < $directory_list
}

function propose_dir_path() {
	# if it is home directory, reject the proposal
	if [[ "$PWD" == "$HOME" ]]; then
		return
	fi

	if [[ "$(path_already_listed "$PWD")" == "exist" ]]; then
		delete_a_dir_path "$PWD"
	fi

	insert_dir_path_to_top "$PWD"
	if [[ `number_of_dir_paths` -gt "$history_size" ]]; then
		apply_max_limit_to_history
		date +%s > "$last_dir_remove"
	fi
}

function o() {
	if [ $# -eq 1 ]
	then
		propose_dir_path
	fi

	xdg-open "$@"
}

function v() {
	# propose dir path if vim is used to edit existing files
	if [ $# -gt 0 ]
	then
		propose_dir_path
	fi
	$assignedEditor "$@"
}
